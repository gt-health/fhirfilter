/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package edu.gatech.chai.fhir.fhirfilter.api;

import edu.gatech.chai.fhir.fhirfilter.model.FilterData;
import edu.gatech.chai.fhir.fhirfilter.model.ListFilterData;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-01-17T23:00:33.270095-05:00[America/New_York]")
@Api(value = "manage", description = "the manage API")
public interface ManageApi {

    @ApiOperation(value = "read all filter profiles", nickname = "manageGet", notes = "", response = ListFilterData.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of all filter profiles", response = ListFilterData.class),
        @ApiResponse(code = 401, message = "Authentication information is missing or invalid") })
    @RequestMapping(value = "/manage",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListFilterData> manageGet();


    @ApiOperation(value = "delete filter profile by id", nickname = "manageIdDelete", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted"),
        @ApiResponse(code = 401, message = "Authentication information is missing or invalid") })
    @RequestMapping(value = "/manage/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> manageIdDelete(@ApiParam(value = "Profile ID to be deleted.",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "read filter profile by id", nickname = "manageIdGet", notes = "", response = FilterData.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "filter profile of id", response = FilterData.class),
        @ApiResponse(code = 401, message = "Authentication information is missing or invalid") })
    @RequestMapping(value = "/manage/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<FilterData> manageIdGet(@ApiParam(value = "Profile ID to be read.",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "update filter profile data.", nickname = "manageIdPut", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Authentication information is missing or invalid") })
    @RequestMapping(value = "/manage/{id}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> manageIdPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody FilterData body,@ApiParam(value = "Profile ID to be updated.",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Add a new filter profile data.", nickname = "managePost", notes = "", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 401, message = "Authentication information is missing or invalid"),
        @ApiResponse(code = 409, message = "Conflict") })
    @RequestMapping(value = "/manage",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> managePost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody FilterData body);


    @ApiOperation(value = "read filter profile by name", nickname = "manageProfileNameGet", notes = "", response = FilterData.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "named filter profile", response = FilterData.class),
        @ApiResponse(code = 401, message = "Authentication information is missing or invalid") })
    @RequestMapping(value = "/manage/profile/{name}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<FilterData> manageProfileNameGet(@ApiParam(value = "Profile name to be read.",required=true) @PathVariable("name") String name);

}
